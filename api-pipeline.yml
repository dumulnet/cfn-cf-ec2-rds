AWSTemplateFormatVersion: 2010-09-09
Description: Starter template for API Pipeline
  
Parameters:
  VpcStack:
    Type: String
    Description: Name of VPC stack to build off of
    Default: vpc-stack

  GitHubOwner:
    Type: String
    Description: The username or org that owns the repo

  GitHubRepo:
    Type: String
    Description: The name of the repo as it appears in Github. ex) https://github.com/[GitHubRepo]

  GitHubBranch:
    Type: String
    Description: The branch to pull
    Default: main

  GitHubTokenSecretName:
    Type: String
    Description: The name of the Secrets Manager secret that contains a GitHub personal access token
    Default: Github

  GitHubTokenSecretKeyName:
    Type: String
    Description: The JSON key name of the Secrets Manager value
    Default: PersonalAccessToken

  EnvironmentName:
    Description: The prefix name of the project. ex) gmf -> gmfvpc
    Type: String

  Image:
    Type: String
    Description: URI of docker image you would like to use

  MaxContainers:
    Type: Number
    Description: Max containers to scale to

  HostedZoneId:
    Type: String
    Description: Hosted Zone ID

  DomainName:
    Description: Domain Name
    Type: String

  APISubDomainName:
    Description: Please enter a sub-domain name for web.
    Type: String
    Default: api

  APICertificateId:
    Description: API Certificate ID
    Type: String

  AlertDetailType:
    Description: The level of detail to include in the notifications for this resource. (see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html)
    Default: FULL
    Type: String
    AllowedValues:
      - FULL
      - BASIC

  NotificationTargetType:
    Description: The target type. Can be an Amazon Simple Notification Service topic or AWS Chatbot client.
    Default: SNS
    Type: String
    AllowedValues:
     # - AWSChatbotSlack
      - SNS

  SnsTopicArns:
    Description: Notification Topic Arn
    Type: String

Resources:
  
# ECS Cluster

  EcrRepo:
    Type: AWS::ECR::Repository

  EcsCluster:
    Type: AWS::ECS::Cluster

  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        VpcId:
          Fn::ImportValue: !Sub ${VpcStack}-VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  DefaultRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
              - ecs.amazonaws.com
              - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess


  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref DefaultSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${VpcStack}-PubSubnet1ID
        - Fn::ImportValue: !Sub ${VpcStack}-PubSubnet2ID
      Type: application

# Domain Alias
  LoadBalancerAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: 
        Fn::ImportValue: !Ref HostedZoneId
      Name: !Sub ${APISubDomainName}.${DomainName}
      Type: A

# API CI/CD

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Delete
    Properties:
      BucketName:
        !Sub
          - ${EnvironmentName}-api-pipeline-${RandomGUID}
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - codepipeline.amazonaws.com
              Action:
                - sts:AssumeRole
      Description: IAM Role for CodePipeline
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - codebuild.amazonaws.com
              Action:
                - sts:AssumeRole
      Description: IAM Role for CodeBuild
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess # To download/upload artifacts to CodePipeline
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      # Policies:
      #   - PolicyName: root
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - ecr:GetAuthorizationToken
      #           Resource: '*'

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineArtifactBucket
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: Ingress
          Actions:
            - InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Owner: ThirdParty
                Category: Source
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Sub '{{resolve:secretsmanager:${GitHubTokenSecretName}:SecretString:${GitHubTokenSecretKeyName}}}'
              Name: ApplicationSource
        -
          Name: Build
          Actions:
            - Name: BuildDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub '[{"name":"ECR_REPOSITORY_URI","value":"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepo}","type":"PLAINTEXT"},{"name":"ECR_LOGIN_URL","value":"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com","type":"PLAINTEXT"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        -
          Name: Deploy
          Actions:
            - Name: DeployImage
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              RunOrder: 1
              Configuration:
                ClusterName: !Ref EcsCluster
                ServiceName: !GetAtt FargateService.Name
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact

  CodeBuildLogGroup:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub /aws/codebuild/${CodeBuild}

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: CodeBuild for Fargate
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      TimeoutInMinutes: 10

  NotificationRule:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      Name: 
        !Sub
          - ${EnvironmentName}-NotiRule-${RandomGUID}
          - { RandomGUID: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref AWS::StackId ]]]] }
      Resource: !Sub 
          - arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}
          - {CodePipeline: !Ref CodePipeline}
      DetailType: !Ref AlertDetailType

      EventTypeIds:
        - codepipeline-pipeline-pipeline-execution-failed
        - codepipeline-pipeline-pipeline-execution-canceled
        - codepipeline-pipeline-pipeline-execution-started
        - codepipeline-pipeline-pipeline-execution-resumed
        - codepipeline-pipeline-pipeline-execution-succeeded
        - codepipeline-pipeline-pipeline-execution-superseded
        - codepipeline-pipeline-manual-approval-needed
      Targets:
        - TargetType: !Ref NotificationTargetType
          TargetAddress: 
            Fn::ImportValue: !Ref SnsTopicArns

# Fargate Service Autoscaling

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStack}-VPC

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP

  ListenerTls:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates: 
        - 
          CertificateArn: 
            Fn::ImportValue: !Ref APICertificateId
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS

  FargateService:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    DependsOn:
      - ApplicationLoadBalancer
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        -
          ContainerName: serverless-container-api
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
          AwsvpcConfiguration:
            SecurityGroups:
              - !Ref DefaultSecurityGroup
            Subnets:
              -
                Fn::ImportValue: !Sub ${VpcStack}-PriSubnet1ID
              -
                Fn::ImportValue: !Sub ${VpcStack}-PriSubnet2ID
      TaskDefinition: !Ref FargateServiceTaskDefinition

  FargateServiceLogGroup:
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  FargateServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        -
          Name: serverless-container-api
          Essential: true
          Image: !Ref Image
          LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref FargateServiceLogGroup
                awslogs-stream-prefix: serverless-container-api
                awslogs-region: !Ref AWS::Region
          PortMappings:
            -
              ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
      Cpu: '256'
      ExecutionRoleArn: !Ref DefaultRole
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        -  FARGATE
      TaskRoleArn: !Ref DefaultRole


# -----------------------------------------------------------
#  AUTO SCALING
# -----------------------------------------------------------

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                Resource: '*'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join
        - '/'
        - - service
          - !Ref EcsCluster
          - !GetAtt FargateService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${FargateService}ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${FargateService}ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  # this alarm is somewhat nonsense but easy to test out
  # change to something relevant before production
  AlarmHighRequests:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: TRUE
      AlarmActions:
        - !Ref ScaleUpPolicy
      AlarmDescription: !Sub
        - 'Scale Up Alarm based on requests for ${FargateServiceName}'
        - FargateServiceName: !GetAtt FargateService.Name
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      # these can be found in the console after selecting a namespace to filter by
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 3
      # this can be found in the console on the screen before a metric is graphed
      MetricName: RequestCountPerTarget
      # this can be found in the console on the first screen of filtering metrics
      Namespace: AWS/ApplicationELB
      OKActions:
        - !Ref ScaleDownPolicy
      Period: 60
      Statistic: Sum
      Threshold: 3000
      TreatMissingData: ignore
      Unit: None # comes from the metric

    
Outputs:
  EcsClusterExport:
    Description: A reference to the created ECS Cluster
    Value: !Ref EcsCluster
    Export:
      Name: !Sub ${AWS::StackName}-ecs-cluster

  DefaultSecurityGroupExport:
    Description: A reference to the created SG
    Value: !Ref DefaultSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-default-security-group

  DefaultRoleExport:
    Description: A reference to the created IAM Role
    Value: !Ref DefaultRole
    Export:
      Name: !Sub ${AWS::StackName}-default-role

  ApplicationLoadBalancerArnExport:
    Description: A reference to the created ALB
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-alb-arn

  FargateServiceName:
    Description: A reference to the created Fargate Service
    Value: !GetAtt FargateService.Name
    Export:
      Name: !Sub ${AWS::StackName}-fargate-service-name

  CodePipelineName:
    Description: The Pipeline name
    Value: !Ref CodePipeline
    Export:
      Name: !Sub ${AWS::StackName}-CodePipelineName
